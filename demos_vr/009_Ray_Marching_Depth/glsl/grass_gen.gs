#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices = 17) out; 
 
uniform mat4 projection_view_matrix;

in vec3 position_ws[];
in vec3 axis_x[];
in vec3 axis_z[];
in vec3 hash[];
in float scale[];

out vec3 position;
out vec3 normal;

void main()
{
    //==========================================================================================================================================================
    // gravity lean
    //==========================================================================================================================================================
    float gravity_lean = 0.245 * hash[0].x;  

    //==========================================================================================================================================================
    // blade angular twist
    //==========================================================================================================================================================
    float angular_twist = 0.245 * hash[0].y;

    //==========================================================================================================================================================
    // initial blade width
    //==========================================================================================================================================================
    float w = 0.01075 * hash[0].z;  

    //==========================================================================================================================================================
    // tangent + normal + binormal
    //==========================================================================================================================================================
    vec3 t = axis_z[0];
    vec3 b = axis_x[0];
    vec3 n = cross(t, b);

    //==========================================================================================================================================================
    // current accumulated position
    //==========================================================================================================================================================
    vec3 p = position_ws[0];

    for (int i = 0; i < 8; ++i)
    {
        position = p - w * b;
        normal = n;
        gl_Position = projection_view_matrix * vec4(position, 1.0f);
        EmitVertex();

        position = p + w * b;
        normal = n;
        gl_Position = projection_view_matrix * vec4(position, 1.0f);
        EmitVertex();

        //======================================================================================================================================================
        // Frenet formulae :: k = curvature, t = torsion :: k ~ gravity_lean, t ~ angular_twist
        // dt / ds = kN
        // dN / ds = -kT + tB
        // dB / ds = -tN
        //======================================================================================================================================================
        w = 0.97 * w;
        p += 0.125 * scale[0] * t;
        t = t + gravity_lean * n;
        b = b - angular_twist * n;

        //======================================================================================================================================================
        // orthonormalize    
        //======================================================================================================================================================
        t = normalize(t);
        b = normalize(b - dot(t, b) * t);
        n = cross(t, b);
    }

    position = p;
    normal = n;
    gl_Position = projection_view_matrix * vec4(position, 1.0f);
    EmitVertex();

    EndPrimitive();
}