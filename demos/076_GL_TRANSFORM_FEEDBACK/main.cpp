//========================================================================================================================================================================================================================
// DEMO 076 : Transform Feedback
//========================================================================================================================================================================================================================
#include "log.hpp"
#include "gl_info.hpp"
#include "glfw_window.hpp"
#include "shader.hpp"

//=======================================================================================================================================================================================================================
// program entry point
//=======================================================================================================================================================================================================================
int main(int argc, char *argv[])
{
    //===================================================================================================================================================================================================================
    // initialize GLFW library, create GLFW window and initialize GLEW library
    // 4AA samples, OpenGL 3.3 context, screen resolution : 1920 x 1080
    //===================================================================================================================================================================================================================
    if (!glfw::init())
        exit_msg("Failed to initialize GLFW library. Exiting ...");

    glfw_window_t window("Transform Feedback", 4, 3, 3, 1920, 1080, true);
    gl_info::dump(OPENGL_BASIC_INFO | OPENGL_EXTENSIONS_INFO | OPENGL_COMPUTE_SHADER_INFO);

    //===================================================================================================================================================================================================================
    // Compile and link transform feedback shader
    //===================================================================================================================================================================================================================
    glsl_shader_t tfb_vs(GL_VERTEX_SHADER,   "glsl/tfb.vs");
    glsl_shader_t tfb_gs(GL_GEOMETRY_SHADER, "glsl/tfb.gs");
    
    glsl_program_t tranform_fb;
    tranform_fb.id = glCreateProgram();
    tranform_fb.attach(tfb_vs);
    tranform_fb.attach(tfb_gs);

    const GLchar* fb_varyings[] = {"outValue"};
    glTransformFeedbackVaryings(tranform_fb.id, 1, fb_varyings, GL_INTERLEAVED_ATTRIBS);

    tranform_fb.link();
    tranform_fb.enable();

    //===================================================================================================================================================================================================================
    // Create vertetx array object
    //===================================================================================================================================================================================================================
    GLuint vao_id;
    glGenVertexArrays(1, &vao_id);
    glBindVertexArray(vao_id);

    GLfloat data[] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f};

    GLuint vbo_id;
    glGenBuffers(1, &vbo_id);
    glBindBuffer(GL_ARRAY_BUFFER, vbo_id);
    glBufferData(GL_ARRAY_BUFFER, sizeof(data), data, GL_STATIC_DRAW);

    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 1, GL_FLOAT, GL_FALSE, 0, 0);

    //===================================================================================================================================================================================================================
    // Create transform feedback buffer
    //===================================================================================================================================================================================================================
    GLuint tbo_id;
    glGenBuffers(1, &tbo_id);
    glBindBuffer(GL_ARRAY_BUFFER, tbo_id);
    glBufferData(GL_ARRAY_BUFFER, 3 * sizeof(data), 0, GL_STATIC_READ);

    //===================================================================================================================================================================================================================
    // Create query object to collect info
    //===================================================================================================================================================================================================================
    GLuint query_id;
    glGenQueries(1, &query_id);

    //===================================================================================================================================================================================================================
    // Perform feedback transform
    //===================================================================================================================================================================================================================
    glEnable(GL_RASTERIZER_DISCARD);

    glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, 0, tbo_id);

    glBeginQuery(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, query_id);
        glBeginTransformFeedback(GL_TRIANGLES);
            glDrawArrays(GL_POINTS, 0, 5);
        glEndTransformFeedback();
    glEndQuery(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);

    glDisable(GL_RASTERIZER_DISCARD);

    glFlush();

    //===================================================================================================================================================================================================================
    // Fetch and print results
    //===================================================================================================================================================================================================================
    GLuint primitives;
    glGetQueryObjectuiv(query_id, GL_QUERY_RESULT, &primitives);

    GLfloat feedback[15];
    glGetBufferSubData(GL_TRANSFORM_FEEDBACK_BUFFER, 0, sizeof(feedback), feedback);

    debug_msg("%u primitives written!", primitives);

    for (int i = 0; i < 5; i++)
    {
        debug_msg("\tprimitive #%u { %f, %f, %f }", i, feedback[3 * i + 0], feedback[3 * i + 1], feedback[3 * i + 2]);
    }

    //===================================================================================================================================================================================================================
    // OpenGL rendering parameters setup : background color -- dark blue
    //===================================================================================================================================================================================================================
    glClearColor(0.01f, 0.0f, 0.08f, 0.0f);

    //===================================================================================================================================================================================================================
    // main program loop : just clear the color and depth buffer in a loop
    //===================================================================================================================================================================================================================
    while(!window.should_close())
    {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        window.new_frame();
        window.end_frame();
    }

    //===================================================================================================================================================================================================================
    // terminate the program and exit
    //===================================================================================================================================================================================================================
    glDeleteQueries(1, &query_id);
    glDeleteBuffers(1, &tbo_id);
    glDeleteBuffers(1, &vbo_id);
    glDeleteVertexArrays(1, &vao_id);

    glfw::terminate();
    return 0;
}




