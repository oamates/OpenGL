#version 400 core

layout (vertices = 3) out;

uniform float inv_max_edge; 

in vec3 position_ws[];
in vec3 normal_ws[];

out vec3 position[];
out vec3 normal[];

void main()
{
    vec3 position_this = position_ws[gl_InvocationID];
    position[gl_InvocationID] = position_this;
    normal[gl_InvocationID] = normal_ws[gl_InvocationID];

    vec3 position_next = position_ws[(gl_InvocationID + 1) % 3];
    float l = length(position_next - position_this);
    gl_TessLevelOuter[(gl_InvocationID + 2) % 3] = clamp(inv_max_edge * l, 1.0f, 16.0f);

    barrier();
    gl_TessLevelInner[0] = 0.33f * (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]);
}
