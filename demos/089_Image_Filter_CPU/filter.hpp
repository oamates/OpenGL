#ifndef _filter_included_890216350182375601238754120837461237895412983612398246
#define _filter_included_890216350182375601238754120837461237895412983612398246

#include "nvimage.h"
//#include "nvcore/Debug.h"

namespace nv
{
    class Vector4;

    //===================================================================================================================================================================================================================
    // base filter class
    //===================================================================================================================================================================================================================
    struct filter_t
    {
        filter_t(float width);
        virtual ~filter_t();

        float width() const { return m_width; }
        float sampleDelta(float x, float scale) const;
        float sampleBox(float x, float scale, int samples) const;
        float sampleTriangle(float x, float scale, int samples) const;

        virtual float evaluate(float x) const = 0;

        const float m_width;
    };

    //===================================================================================================================================================================================================================
    // box filter
    //===================================================================================================================================================================================================================
    struct BoxFilter : public filter_t
    {
        BoxFilter();
        BoxFilter(float width);
        virtual float evaluate(float x) const;
    };

    //===================================================================================================================================================================================================================
    // triangle tent filter
    //===================================================================================================================================================================================================================
    struct TriangleFilter : public filter_t
    {
        TriangleFilter();
        TriangleFilter(float width);
        virtual float evaluate(float x) const;
    };

    //===================================================================================================================================================================================================================
    // Quadratic (bell) filter.
    //===================================================================================================================================================================================================================
    struct QuadraticFilter : public filter_t
    {
    public:
        QuadraticFilter();
        virtual float evaluate(float x) const;
    };

    //===================================================================================================================================================================================================================
    // Cubic filter from Thatcher Ulrich.
    //===================================================================================================================================================================================================================
    struct CubicFilter : public filter_t
    {
        CubicFilter();
        virtual float evaluate(float x) const;
    };

    //===================================================================================================================================================================================================================
    // Cubic b-spline filter from Paul Heckbert.
    //===================================================================================================================================================================================================================
    struct BSplineFilter : public filter_t
    {
        BSplineFilter();
        virtual float evaluate(float x) const;
    };

    //===================================================================================================================================================================================================================
    // Mitchell & Netravali's two-param cubic
    // "Reconstruction Filters in Computer Graphics", SIGGRAPH 88
    //===================================================================================================================================================================================================================
    struct MitchellFilter : public filter_t
    {
        MitchellFilter();
        virtual float evaluate(float x) const;

        void setParameters(float b, float c);

        float p0, p2, p3;
        float q0, q1, q2, q3;
    };

    //===================================================================================================================================================================================================================
    // Lanczos3 filter.
    //===================================================================================================================================================================================================================
    struct LanczosFilter : public filter_t
    {
        LanczosFilter();
        virtual float evaluate(float x) const;
    };

    //===================================================================================================================================================================================================================
    // Sinc filter.
    //===================================================================================================================================================================================================================
    struct SincFilter : public filter_t
    {
        SincFilter(float w);
        virtual float evaluate(float x) const;
    };

    //===================================================================================================================================================================================================================
    // Kaiser filter.
    //===================================================================================================================================================================================================================
    struct KaiserFilter : public filter_t
    {
        float alpha;
        float stretch;

        KaiserFilter(float w);
        virtual float evaluate(float x) const;

        void setParameters(float a, float stretch);
    };

    //===================================================================================================================================================================================================================
    // Gaussian filter.
    //===================================================================================================================================================================================================================
    struct GaussianFilter : public filter_t
    {
        float variance;

        GaussianFilter(float w);
        virtual float evaluate(float x) const;
        void setParameters(float variance);
    };

    //===================================================================================================================================================================================================================
    /// A 1D kernel. Used to precompute filter weights.
    //===================================================================================================================================================================================================================
    struct Kernel1
    {
        int m_windowSize;
        float m_width;
        float * m_data;

        NV_FORBID_COPY(Kernel1);

        Kernel1(const filter_t& f, int iscale, int samples = 32);
        ~Kernel1();

        float valueAt(unsigned int x) const {
            return m_data[x];
        }

        int windowSize() const {
            return m_windowSize;
        }

        float width() const {
            return m_width;
        }

        void debugPrint();

    };

    //===================================================================================================================================================================================================================
    // 2D kernel
    //===================================================================================================================================================================================================================
    struct Kernel2 
    {
        const unsigned int m_windowSize;
        float * m_data;

        Kernel2(unsigned int width);
        Kernel2(unsigned int width, const float * data);
        Kernel2(const Kernel2 & k);
        ~Kernel2();

        void normalize();
        void transpose();

        float valueAt(unsigned int x, unsigned int y) const {
            return m_data[y * m_windowSize + x];
        }

        unsigned int windowSize() const {
            return m_windowSize;
        }

        void initLaplacian();
        void initEdgeDetection();
        void initSobel();
        void initPrewitt();

        void initBlendedSobel(const Vector4 & scale);

    };

    //===================================================================================================================================================================================================================
    // 1D polyphase kernel
    //===================================================================================================================================================================================================================
    struct PolyphaseKernel
    {
        int m_windowSize;
        unsigned int m_length;
        float m_width;
        float * m_data;

        NV_FORBID_COPY(PolyphaseKernel);

        PolyphaseKernel(const Filter & f, unsigned int srcLength, unsigned int dstLength, int samples = 32);
        ~PolyphaseKernel();

        int windowSize() const {
            return m_windowSize;
        }

        unsigned int length() const {
            return m_length;
        }

        float width() const {
            return m_width;
        }

        float valueAt(unsigned int column, unsigned int x) const {
            return m_data[column * m_windowSize + x];
        }

        void debugPrint() const;
    };

} // nv namespace

#endif // _filter_included_890216350182375601238754120837461237895412983612398246
