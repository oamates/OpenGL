//=======================================================================================================================================================================================================================
// Marching cubes algorithm implementation
//=======================================================================================================================================================================================================================

#include <cstdlib>
#include <map>
#include <vector>

#include <glm/gtx/string_cast.hpp>
#include <glm/ext.hpp> 

#include "log.hpp"
#include "isosurface.hpp"
#include "vertex.hpp"

//========================================================================================================================================================================================================================
// cube_vertices represents vertex displacement from the base vertex of a unit cube
//========================================================================================================================================================================================================================
const glm::dvec3 cube_vertices[8] =
{
	glm::dvec3(0.0, 0.0, 0.0),
	glm::dvec3(1.0, 0.0, 0.0),
	glm::dvec3(1.0, 1.0, 0.0),
	glm::dvec3(0.0, 1.0, 0.0),
	glm::dvec3(0.0, 0.0, 1.0),
	glm::dvec3(1.0, 0.0, 1.0),
	glm::dvec3(1.0, 1.0, 1.0),
	glm::dvec3(0.0, 1.0, 1.0)
};

//========================================================================================================================================================================================================================
// cube_edges contains initial and terminal indices of all the 12 edges of a cube 
//========================================================================================================================================================================================================================
const GLbyte cube_edges[12][2] = {{0, 1}, {1, 2}, {2, 3}, {3, 0}, {4, 5}, {5, 6}, {6, 7}, {7, 4}, {0, 4}, {1, 5}, {2, 6}, {3, 7}};

const unsigned int SHIFT = 10;
const GLuint edge_local_hash[12] = 
{
	(1 << 0) + (0 << SHIFT) + (0 << (SHIFT + SHIFT)),
	(2 << 0) + (1 << SHIFT) + (0 << (SHIFT + SHIFT)),
	(1 << 0) + (2 << SHIFT) + (0 << (SHIFT + SHIFT)),
	(0 << 0) + (1 << SHIFT) + (0 << (SHIFT + SHIFT)),
	(1 << 0) + (0 << SHIFT) + (2 << (SHIFT + SHIFT)),
	(2 << 0) + (1 << SHIFT) + (2 << (SHIFT + SHIFT)),
	(1 << 0) + (2 << SHIFT) + (2 << (SHIFT + SHIFT)),
	(0 << 0) + (1 << SHIFT) + (2 << (SHIFT + SHIFT)),
	(0 << 0) + (0 << SHIFT) + (1 << (SHIFT + SHIFT)),
	(2 << 0) + (0 << SHIFT) + (1 << (SHIFT + SHIFT)),
	(2 << 0) + (2 << SHIFT) + (1 << (SHIFT + SHIFT)),
	(0 << 0) + (2 << SHIFT) + (1 << (SHIFT + SHIFT))
};

//========================================================================================================================================================================================================================
// edge_directions lists the direction vector for all cube edges
//========================================================================================================================================================================================================================
const glm::dvec3 edge_directions[12] =
{
	glm::vec3( 1.0,  0.0,  0.0),
	glm::vec3( 0.0,  1.0,  0.0),
	glm::vec3(-1.0,  0.0,  0.0),
	glm::vec3( 0.0, -1.0,  0.0),
	glm::vec3( 1.0,  0.0,  0.0),
	glm::vec3( 0.0,  1.0,  0.0),
	glm::vec3(-1.0,  0.0,  0.0),
	glm::vec3( 0.0, -1.0,  0.0),
	glm::vec3( 0.0,  0.0,  1.0),
	glm::vec3( 0.0,  0.0,  1.0),
	glm::vec3( 0.0,  0.0,  1.0),
	glm::vec3( 0.0,  0.0,  1.0)
};

//========================================================================================================================================================================================================================
// intersected_edges[N] is a bitmask showing which edges of the cube of type N are intersected by the isosurface for each intersected edge a new vertex 
// in a vertex buffer will be generated. the position of this new vertex depends only on the value of the function on two neighbouring vertices and the 
// iso-value and calculated as if the function was linear,  hence position is the same for all cubes which share this same edge
//========================================================================================================================================================================================================================
const GLushort intersected_edges[0x100] =
{
	0x000, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00, 0x190, 0x099, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90, 
	0x230, 0x339, 0x033, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, 0x3a0, 0x2a9, 0x1a3, 0x0aa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, 
	0x460, 0x569, 0x663, 0x76a, 0x066, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, 0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0x0ff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 
	0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x055, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950, 0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0x0cc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0, 
	0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0x0cc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0, 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x055, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, 
	0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0x0ff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x066, 0x76a, 0x663, 0x569, 0x460, 
	0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0x0aa, 0x1a3, 0x2a9, 0x3a0, 0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x033, 0x339, 0x230, 
	0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x099, 0x190, 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x000
};

//========================================================================================================================================================================================================================
// surface_triangles[N] is a list of triangles that must be generated for a cube of type N
// -1 means the end of the triangles list
//========================================================================================================================================================================================================================
const GLbyte surface_triangles[0x100][0x10] =  
{
	{-1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 3,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 1, 9,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 8, 3,   9, 8, 1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2,10,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 3,   1, 2,10,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 2,10,   0, 2, 9,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 8, 3,   2,10, 8,  10, 9, 8,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3,11, 2,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0,11, 2,   8,11, 0,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 9, 0,   2, 3,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1,11, 2,   1, 9,11,   9, 8,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3,10, 1,  11,10, 3,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0,10, 1,   0, 8,10,   8,11,10,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 9, 0,   3,11, 9,  11,10, 9,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 8,10,  10, 8,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 7, 8,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 3, 0,   7, 3, 4,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 1, 9,   8, 4, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 1, 9,   4, 7, 1,   7, 3, 1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2,10,   8, 4, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 4, 7,   3, 0, 4,   1, 2,10,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 2,10,   9, 0, 2,   8, 4, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2,10, 9,   2, 9, 7,   2, 7, 3,   7, 9, 4,  -1,-1,-1,  -1},
	{ 8, 4, 7,   3,11, 2,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{11, 4, 7,  11, 2, 4,   2, 0, 4,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 0, 1,   8, 4, 7,   2, 3,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 7,11,   9, 4,11,   9,11, 2,   9, 2, 1,  -1,-1,-1,  -1},
	{ 3,10, 1,   3,11,10,   7, 8, 4,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1,11,10,   1, 4,11,   1, 0, 4,   7,11, 4,  -1,-1,-1,  -1},
	{ 4, 7, 8,   9, 0,11,   9,11,10,  11, 0, 3,  -1,-1,-1,  -1},
	{ 4, 7,11,   4,11, 9,   9,11,10,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 5, 4,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 5, 4,   0, 8, 3,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 5, 4,   1, 5, 0,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 5, 4,   8, 3, 5,   3, 1, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2,10,   9, 5, 4,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 0, 8,   1, 2,10,   4, 9, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5, 2,10,   5, 4, 2,   4, 0, 2,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2,10, 5,   3, 2, 5,   3, 5, 4,   3, 4, 8,  -1,-1,-1,  -1},
	{ 9, 5, 4,   2, 3,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0,11, 2,   0, 8,11,   4, 9, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 5, 4,   0, 1, 5,   2, 3,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 1, 5,   2, 5, 8,   2, 8,11,   4, 8, 5,  -1,-1,-1,  -1},
	{10, 3,11,  10, 1, 3,   9, 5, 4,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 9, 5,   0, 8, 1,   8,10, 1,   8,11,10,  -1,-1,-1,  -1},
	{ 5, 4, 0,   5, 0,11,   5,11,10,  11, 0, 3,  -1,-1,-1,  -1},
	{ 5, 4, 8,   5, 8,10,  10, 8,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 7, 8,   5, 7, 9,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 3, 0,   9, 5, 3,   5, 7, 3,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 7, 8,   0, 1, 7,   1, 5, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 5, 3,   3, 5, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 7, 8,   9, 5, 7,  10, 1, 2,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 1, 2,   9, 5, 0,   5, 3, 0,   5, 7, 3,  -1,-1,-1,  -1},
	{ 8, 0, 2,   8, 2, 5,   8, 5, 7,  10, 5, 2,  -1,-1,-1,  -1},
	{ 2,10, 5,   2, 5, 3,   3, 5, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 7, 9, 5,   7, 8, 9,   3,11, 2,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 5, 7,   9, 7, 2,   9, 2, 0,   2, 7,11,  -1,-1,-1,  -1},
	{ 2, 3,11,   0, 1, 8,   1, 7, 8,   1, 5, 7,  -1,-1,-1,  -1},
	{11, 2, 1,  11, 1, 7,   7, 1, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 5, 8,   8, 5, 7,  10, 1, 3,  10, 3,11,  -1,-1,-1,  -1},
	{ 5, 7, 0,   5, 0, 9,   7,11, 0,   1, 0,10,  11,10, 0,  -1},
	{11,10, 0,  11, 0, 3,  10, 5, 0,   8, 0, 7,   5, 7, 0,  -1},
	{11,10, 5,   7,11, 5,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 6, 5,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 3,   5,10, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 0, 1,   5,10, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 8, 3,   1, 9, 8,   5,10, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 6, 5,   2, 6, 1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 6, 5,   1, 2, 6,   3, 0, 8,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 6, 5,   9, 0, 6,   0, 2, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5, 9, 8,   5, 8, 2,   5, 2, 6,   3, 2, 8,  -1,-1,-1,  -1},
	{ 2, 3,11,  10, 6, 5,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{11, 0, 8,  11, 2, 0,  10, 6, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 1, 9,   2, 3,11,   5,10, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5,10, 6,   1, 9, 2,   9,11, 2,   9, 8,11,  -1,-1,-1,  -1},
	{ 6, 3,11,   6, 5, 3,   5, 1, 3,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8,11,   0,11, 5,   0, 5, 1,   5,11, 6,  -1,-1,-1,  -1},
	{ 3,11, 6,   0, 3, 6,   0, 6, 5,   0, 5, 9,  -1,-1,-1,  -1},
	{ 6, 5, 9,   6, 9,11,  11, 9, 8,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5,10, 6,   4, 7, 8,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 3, 0,   4, 7, 3,   6, 5,10,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 9, 0,   5,10, 6,   8, 4, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 6, 5,   1, 9, 7,   1, 7, 3,   7, 9, 4,  -1,-1,-1,  -1},
	{ 6, 1, 2,   6, 5, 1,   4, 7, 8,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2, 5,   5, 2, 6,   3, 0, 4,   3, 4, 7,  -1,-1,-1,  -1},
	{ 8, 4, 7,   9, 0, 5,   0, 6, 5,   0, 2, 6,  -1,-1,-1,  -1},
	{ 7, 3, 9,   7, 9, 4,   3, 2, 9,   5, 9, 6,   2, 6, 9,  -1},
	{ 3,11, 2,   7, 8, 4,  10, 6, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5,10, 6,   4, 7, 2,   4, 2, 0,   2, 7,11,  -1,-1,-1,  -1},
	{ 0, 1, 9,   4, 7, 8,   2, 3,11,   5,10, 6,  -1,-1,-1,  -1},
	{ 9, 2, 1,   9,11, 2,   9, 4,11,   7,11, 4,   5,10, 6,  -1},
	{ 8, 4, 7,   3,11, 5,   3, 5, 1,   5,11, 6,  -1,-1,-1,  -1},
	{ 5, 1,11,   5,11, 6,   1, 0,11,   7,11, 4,   0, 4,11,  -1},
	{ 0, 5, 9,   0, 6, 5,   0, 3, 6,  11, 6, 3,   8, 4, 7,  -1},
	{ 6, 5, 9,   6, 9,11,   4, 7, 9,   7,11, 9,  -1,-1,-1,  -1},
	{10, 4, 9,   6, 4,10,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4,10, 6,   4, 9,10,   0, 8, 3,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 0, 1,  10, 6, 0,   6, 4, 0,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 3, 1,   8, 1, 6,   8, 6, 4,   6, 1,10,  -1,-1,-1,  -1},
	{ 1, 4, 9,   1, 2, 4,   2, 6, 4,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 0, 8,   1, 2, 9,   2, 4, 9,   2, 6, 4,  -1,-1,-1,  -1},
	{ 0, 2, 4,   4, 2, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 3, 2,   8, 2, 4,   4, 2, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 4, 9,  10, 6, 4,  11, 2, 3,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 2,   2, 8,11,   4, 9,10,   4,10, 6,  -1,-1,-1,  -1},
	{ 3,11, 2,   0, 1, 6,   0, 6, 4,   6, 1,10,  -1,-1,-1,  -1},
	{ 6, 4, 1,   6, 1,10,   4, 8, 1,   2, 1,11,   8,11, 1,  -1},
	{ 9, 6, 4,   9, 3, 6,   9, 1, 3,  11, 6, 3,  -1,-1,-1,  -1},
	{ 8,11, 1,   8, 1, 0,  11, 6, 1,   9, 1, 4,   6, 4, 1,  -1},
	{ 3,11, 6,   3, 6, 0,   0, 6, 4,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 6, 4, 8,  11, 6, 8,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 7,10, 6,   7, 8,10,   8, 9,10,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 7, 3,   0,10, 7,   0, 9,10,   6, 7,10,  -1,-1,-1,  -1},
	{10, 6, 7,   1,10, 7,   1, 7, 8,   1, 8, 0,  -1,-1,-1,  -1},
	{10, 6, 7,  10, 7, 1,   1, 7, 3,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2, 6,   1, 6, 8,   1, 8, 9,   8, 6, 7,  -1,-1,-1,  -1},
	{ 2, 6, 9,   2, 9, 1,   6, 7, 9,   0, 9, 3,   7, 3, 9,  -1},
	{ 7, 8, 0,   7, 0, 6,   6, 0, 2,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 7, 3, 2,   6, 7, 2,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 3,11,  10, 6, 8,  10, 8, 9,   8, 6, 7,  -1,-1,-1,  -1},
	{ 2, 0, 7,   2, 7,11,   0, 9, 7,   6, 7,10,   9,10, 7,  -1},
	{ 1, 8, 0,   1, 7, 8,   1,10, 7,   6, 7,10,   2, 3,11,  -1},
	{11, 2, 1,  11, 1, 7,  10, 6, 1,   6, 7, 1,  -1,-1,-1,  -1},
	{ 8, 9, 6,   8, 6, 7,   9, 1, 6,  11, 6, 3,   1, 3, 6,  -1},
	{ 0, 9, 1,  11, 6, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 7, 8, 0,   7, 0, 6,   3,11, 0,  11, 6, 0,  -1,-1,-1,  -1},
	{ 7,11, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 7, 6,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 0, 8,  11, 7, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 1, 9,  11, 7, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 1, 9,   8, 3, 1,  11, 7, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 1, 2,   6,11, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2,10,   3, 0, 8,   6,11, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 9, 0,   2,10, 9,   6,11, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 6,11, 7,   2,10, 3,  10, 8, 3,  10, 9, 8,  -1,-1,-1,  -1},
	{ 7, 2, 3,   6, 2, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 7, 0, 8,   7, 6, 0,   6, 2, 0,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 7, 6,   2, 3, 7,   0, 1, 9,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 6, 2,   1, 8, 6,   1, 9, 8,   8, 7, 6,  -1,-1,-1,  -1},
	{10, 7, 6,  10, 1, 7,   1, 3, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 7, 6,   1, 7,10,   1, 8, 7,   1, 0, 8,  -1,-1,-1,  -1},
	{ 0, 3, 7,   0, 7,10,   0,10, 9,   6,10, 7,  -1,-1,-1,  -1},
	{ 7, 6,10,   7,10, 8,   8,10, 9,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 6, 8, 4,  11, 8, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 6,11,   3, 0, 6,   0, 4, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 6,11,   8, 4, 6,   9, 0, 1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 4, 6,   9, 6, 3,   9, 3, 1,  11, 3, 6,  -1,-1,-1,  -1},
	{ 6, 8, 4,   6,11, 8,   2,10, 1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2,10,   3, 0,11,   0, 6,11,   0, 4, 6,  -1,-1,-1,  -1},
	{ 4,11, 8,   4, 6,11,   0, 2, 9,   2,10, 9,  -1,-1,-1,  -1},
	{10, 9, 3,  10, 3, 2,   9, 4, 3,  11, 3, 6,   4, 6, 3,  -1},
	{ 8, 2, 3,   8, 4, 2,   4, 6, 2,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 4, 2,   4, 6, 2,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 9, 0,   2, 3, 4,   2, 4, 6,   4, 3, 8,  -1,-1,-1,  -1},
	{ 1, 9, 4,   1, 4, 2,   2, 4, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 1, 3,   8, 6, 1,   8, 4, 6,   6,10, 1,  -1,-1,-1,  -1},
	{10, 1, 0,  10, 0, 6,   6, 0, 4,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 6, 3,   4, 3, 8,   6,10, 3,   0, 3, 9,  10, 9, 3,  -1},
	{10, 9, 4,   6,10, 4,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 9, 5,   7, 6,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 3,   4, 9, 5,  11, 7, 6,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5, 0, 1,   5, 4, 0,   7, 6,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{11, 7, 6,   8, 3, 4,   3, 5, 4,   3, 1, 5,  -1,-1,-1,  -1},
	{ 9, 5, 4,  10, 1, 2,   7, 6,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 6,11, 7,   1, 2,10,   0, 8, 3,   4, 9, 5,  -1,-1,-1,  -1},
	{ 7, 6,11,   5, 4,10,   4, 2,10,   4, 0, 2,  -1,-1,-1,  -1},
	{ 3, 4, 8,   3, 5, 4,   3, 2, 5,  10, 5, 2,  11, 7, 6,  -1},
	{ 7, 2, 3,   7, 6, 2,   5, 4, 9,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 5, 4,   0, 8, 6,   0, 6, 2,   6, 8, 7,  -1,-1,-1,  -1},
	{ 3, 6, 2,   3, 7, 6,   1, 5, 0,   5, 4, 0,  -1,-1,-1,  -1},
	{ 6, 2, 8,   6, 8, 7,   2, 1, 8,   4, 8, 5,   1, 5, 8,  -1},
	{ 9, 5, 4,  10, 1, 6,   1, 7, 6,   1, 3, 7,  -1,-1,-1,  -1},
	{ 1, 6,10,   1, 7, 6,   1, 0, 7,   8, 7, 0,   9, 5, 4,  -1},
	{ 4, 0,10,   4,10, 5,   0, 3,10,   6,10, 7,   3, 7,10,  -1},
	{ 7, 6,10,   7,10, 8,   5, 4,10,   4, 8,10,  -1,-1,-1,  -1},
	{ 6, 9, 5,   6,11, 9,  11, 8, 9,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 6,11,   0, 6, 3,   0, 5, 6,   0, 9, 5,  -1,-1,-1,  -1},
	{ 0,11, 8,   0, 5,11,   0, 1, 5,   5, 6,11,  -1,-1,-1,  -1},
	{ 6,11, 3,   6, 3, 5,   5, 3, 1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2,10,   9, 5,11,   9,11, 8,  11, 5, 6,  -1,-1,-1,  -1},
	{ 0,11, 3,   0, 6,11,   0, 9, 6,   5, 6, 9,   1, 2,10,  -1},
	{11, 8, 5,  11, 5, 6,   8, 0, 5,  10, 5, 2,   0, 2, 5,  -1},
	{ 6,11, 3,   6, 3, 5,   2,10, 3,  10, 5, 3,  -1,-1,-1,  -1},
	{ 5, 8, 9,   5, 2, 8,   5, 6, 2,   3, 8, 2,  -1,-1,-1,  -1},
	{ 9, 5, 6,   9, 6, 0,   0, 6, 2,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 5, 8,   1, 8, 0,   5, 6, 8,   3, 8, 2,   6, 2, 8,  -1},
	{ 1, 5, 6,   2, 1, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 3, 6,   1, 6,10,   3, 8, 6,   5, 6, 9,   8, 9, 6,  -1},
	{10, 1, 0,  10, 0, 6,   9, 5, 0,   5, 6, 0,  -1,-1,-1,  -1},
	{ 0, 3, 8,   5, 6,10,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 5, 6,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{11, 5,10,   7, 5,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{11, 5,10,  11, 7, 5,   8, 3, 0,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5,11, 7,   5,10,11,   1, 9, 0,  -1,-1,-1,  -1,-1,-1,  -1},
	{10, 7, 5,  10,11, 7,   9, 8, 1,   8, 3, 1,  -1,-1,-1,  -1},
	{11, 1, 2,  11, 7, 1,   7, 5, 1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 3,   1, 2, 7,   1, 7, 5,   7, 2,11,  -1,-1,-1,  -1},
	{ 9, 7, 5,   9, 2, 7,   9, 0, 2,   2,11, 7,  -1,-1,-1,  -1},
	{ 7, 5, 2,   7, 2,11,   5, 9, 2,   3, 2, 8,   9, 8, 2,  -1},
	{ 2, 5,10,   2, 3, 5,   3, 7, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 2, 0,   8, 5, 2,   8, 7, 5,  10, 2, 5,  -1,-1,-1,  -1},
	{ 9, 0, 1,   5,10, 3,   5, 3, 7,   3,10, 2,  -1,-1,-1,  -1},
	{ 9, 8, 2,   9, 2, 1,   8, 7, 2,  10, 2, 5,   7, 5, 2,  -1},
	{ 1, 3, 5,   3, 7, 5,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 7,   0, 7, 1,   1, 7, 5,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 0, 3,   9, 3, 5,   5, 3, 7,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9, 8, 7,   5, 9, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5, 8, 4,   5,10, 8,  10,11, 8,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 5, 0, 4,   5,11, 0,   5,10,11,  11, 3, 0,  -1,-1,-1,  -1},
	{ 0, 1, 9,   8, 4,10,   8,10,11,  10, 4, 5,  -1,-1,-1,  -1},
	{10,11, 4,  10, 4, 5,  11, 3, 4,   9, 4, 1,   3, 1, 4,  -1},
	{ 2, 5, 1,   2, 8, 5,   2,11, 8,   4, 5, 8,  -1,-1,-1,  -1},
	{ 0, 4,11,   0,11, 3,   4, 5,11,   2,11, 1,   5, 1,11,  -1},
	{ 0, 2, 5,   0, 5, 9,   2,11, 5,   4, 5, 8,  11, 8, 5,  -1},
	{ 9, 4, 5,   2,11, 3,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 5,10,   3, 5, 2,   3, 4, 5,   3, 8, 4,  -1,-1,-1,  -1},
	{ 5,10, 2,   5, 2, 4,   4, 2, 0,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3,10, 2,   3, 5,10,   3, 8, 5,   4, 5, 8,   0, 1, 9,  -1},
	{ 5,10, 2,   5, 2, 4,   1, 9, 2,   9, 4, 2,  -1,-1,-1,  -1},
	{ 8, 4, 5,   8, 5, 3,   3, 5, 1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 4, 5,   1, 0, 5,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 8, 4, 5,   8, 5, 3,   9, 0, 5,   0, 3, 5,  -1,-1,-1,  -1},
	{ 9, 4, 5,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4,11, 7,   4, 9,11,   9,10,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 8, 3,   4, 9, 7,   9,11, 7,   9,10,11,  -1,-1,-1,  -1},
	{ 1,10,11,   1,11, 4,   1, 4, 0,   7, 4,11,  -1,-1,-1,  -1},
	{ 3, 1, 4,   3, 4, 8,   1,10, 4,   7, 4,11,  10,11, 4,  -1},
	{ 4,11, 7,   9,11, 4,   9, 2,11,   9, 1, 2,  -1,-1,-1,  -1},
	{ 9, 7, 4,   9,11, 7,   9, 1,11,   2,11, 1,   0, 8, 3,  -1},
	{11, 7, 4,  11, 4, 2,   2, 4, 0,  -1,-1,-1,  -1,-1,-1,  -1},
	{11, 7, 4,  11, 4, 2,   8, 3, 4,   3, 2, 4,  -1,-1,-1,  -1},
	{ 2, 9,10,   2, 7, 9,   2, 3, 7,   7, 4, 9,  -1,-1,-1,  -1},
	{ 9,10, 7,   9, 7, 4,  10, 2, 7,   8, 7, 0,   2, 0, 7,  -1},
	{ 3, 7,10,   3,10, 2,   7, 4,10,   1,10, 0,   4, 0,10,  -1},
	{ 1,10, 2,   8, 7, 4,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 9, 1,   4, 1, 7,   7, 1, 3,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 9, 1,   4, 1, 7,   0, 8, 1,   8, 7, 1,  -1,-1,-1,  -1},
	{ 4, 0, 3,   7, 4, 3,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 4, 8, 7,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9,10, 8,  10,11, 8,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 0, 9,   3, 9,11,  11, 9,10,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 1,10,   0,10, 8,   8,10,11,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 1,10,  11, 3,10,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 2,11,   1,11, 9,   9,11, 8,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 0, 9,   3, 9,11,   1, 2, 9,   2,11, 9,  -1,-1,-1,  -1},
	{ 0, 2,11,   8, 0,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 3, 2,11,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 3, 8,   2, 8,10,  10, 8, 9,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 9,10, 2,   0, 9, 2,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 2, 3, 8,   2, 8,10,   0, 1, 8,   1,10, 8,  -1,-1,-1,  -1},
	{ 1,10, 2,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 1, 3, 8,   9, 1, 8,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 9, 1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{ 0, 3, 8,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1},
	{-1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1,-1,-1,  -1}
};
 
const GLbyte surface_triangles2[0x100][0x10] = 
{
    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  5,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  8,  4,  9,  8,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  4,  5,  1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  9,  1, 11,  0,  1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  1,  8,  4,  1, 11,  8, 11,  9,  8, -1, -1, -1, -1, -1, -1, -1},
    {  4, 10,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0, 10,  1,  8, 10,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  9,  0,  1,  4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5, 10,  1,  5,  9, 10,  9,  8, 10, -1, -1, -1, -1, -1, -1, -1},
    {  4, 11,  5, 10, 11,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0, 11,  5,  0,  8, 11,  8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
    {  4,  9,  0,  4, 10,  9, 10, 11,  9, -1, -1, -1, -1, -1, -1, -1},
    {  9,  8, 11, 11,  8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2,  6,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2,  4,  0,  6,  4,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  5,  9,  8,  2,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2,  5,  9,  2,  6,  5,  6,  4,  5, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1, 11,  8,  2,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  4,  2,  6,  4,  0,  2,  5,  1, 11, -1, -1, -1, -1, -1, -1, -1},
    {  9,  1, 11,  9,  0,  1,  8,  2,  6, -1, -1, -1, -1, -1, -1, -1},
    {  1, 11,  9,  1,  9,  6,  1,  6,  4,  6,  9,  2, -1, -1, -1, -1},
    {  8,  2,  6,  4, 10,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    { 10,  2,  6, 10, 1,   2,  1,  0,  2, -1, -1, -1, -1, -1, -1, -1},
    {  9,  0,  5,  8,  2,  6,  1,  4, 10, -1, -1, -1, -1, -1, -1, -1},
    {  2,  6, 10,  9,  2, 10,  9, 10,  1,  9,  1,  5, -1, -1, -1, -1},
    {  4, 11,  5,  4,  10,11,  6,  8,  2, -1, -1, -1, -1, -1, -1, -1},
    {  5, 10, 11,  5,  2, 10,  5,  0,  2,  6, 10,  2, -1, -1, -1, -1},
    {  2,  6,  8,  9,  0, 10,  9, 10, 11, 10,  0,  4, -1, -1, -1, -1},
    {  2,  6, 10,  2, 10,  9,  9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
    {  9,  7,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  9,  7,  2,  0,  8,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  7,  2,  5,  7,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  8,  7,  2,  8,  4,  7,  4,  5,  7, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1, 11,  9,  7,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  4,  0,  8,  5,  1, 11,  2,  9,  7, -1, -1, -1, -1, -1, -1, -1},
    {  7,  1, 11,  7,  2,  1,  2,  0,  1, -1, -1, -1, -1, -1, -1, -1},
    {  1, 11,  7,  4,  1,  7,  4,  7,  2,  4,  2,  8, -1, -1, -1, -1},
    {  9,  7,  2,  1,  4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0, 10,  1,  0,  8, 10,  2,  9,  7, -1, -1, -1, -1, -1, -1, -1},
    {  0,  7,  2,  0,  5,  7,  1,  4, 10, -1, -1, -1, -1, -1, -1, -1},
    {  1,  5,  7,  1,  7,  8,  1,  8, 10,  2,  8,  7, -1, -1, -1, -1},
    { 11,  4, 10, 11,  5,  4,  9,  7,  2, -1, -1, -1, -1, -1, -1, -1},
    {  2,  9,  7,  0,  8,  5,  8, 11,  5,  8, 10, 11, -1, -1, -1, -1},
    {  7,  2,  0,  7,  0, 10,  7, 10, 11, 10,  0,  4, -1, -1, -1, -1},
    {  7,  2,  8,  7,  8, 11, 11,  8, 10, -1, -1, -1, -1, -1, -1, -1},
    {  9,  6,  8,  7,  6,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  9,  4,  0,  9,  7,  4,  7,  6,  4, -1, -1, -1, -1, -1, -1, -1},
    {  0,  6,  8,  0,  5,  6,  5,  7,  6, -1, -1, -1, -1, -1, -1, -1},
    {  5,  7,  4,  4,  7,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  9,  6,  8,  9,  7,  6, 11,  5,  1, -1, -1, -1, -1, -1, -1, -1},
    { 11,  5,  1,  9,  7,  0,  7,  4,  0,  7,  6,  4, -1, -1, -1, -1},
    {  8,  0,  1,  8,  1,  7,  8,  7,  6, 11,  7,  1, -1, -1, -1, -1},
    {  1, 11,  7,  1,  7,  4,  4,  7,  6, -1, -1, -1, -1, -1, -1, -1},
    {  6,  9,  7,  6,  8,  9,  4, 10,  1, -1, -1, -1, -1, -1, -1, -1},
    {  9,  7,  6,  9,  6,  1,  9,  1,  0,  1,  6, 10, -1, -1, -1, -1},
    {  1,  4, 10,  0,  5,  8,  5,  6,  8,  5,  7,  6, -1, -1, -1, -1},
    { 10,  1,  5, 10,  5,  6,  6,  5,  7, -1, -1, -1, -1, -1, -1, -1},
    {  9,  7,  8,  8,  7,  6, 11,  5,  4, 11,  4, 10, -1, -1, -1, -1},
    {  7,  6,  0,  7,  0,  9,  6, 10,  0,  5,  0, 11, 10, 11,  0, -1},
    { 10, 11,  0, 10,  0,  4, 11,  7,  0,  8,  0,  6,  7,  6,  0, -1},
    { 10, 11,  7,  6, 10,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    { 11,  3,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  4,  7, 11,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  9,  0,  5,  7, 11,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  8,  4,  5,  9,  8,  7, 11,  3, -1, -1, -1, -1, -1, -1, -1},
    {  5,  3,  7,  1,  3,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  3,  7,  5,  1,  3,  4,  0,  8, -1, -1, -1, -1, -1, -1, -1},
    {  9,  3,  7,  9,  0,  3,  0,  1,  3, -1, -1, -1, -1, -1, -1, -1},
    {  7,  9,  8,  7,  8,  1,  7,  1,  3,  4,  1,  8, -1, -1, -1, -1},
    {  1,  4, 10, 11,  3,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    { 10,  0,  8, 10,  1,  0, 11,  3,  7, -1, -1, -1, -1, -1, -1, -1},
    {  0,  5,  9,  1,  4, 10,  7, 11,  3, -1, -1, -1, -1, -1, -1, -1},
    {  7, 11,  3,  5,  9,  1,  9, 10,  1,  9,  8, 10, -1, -1, -1, -1},
    {  3,  4, 10,  3,  7,  4,  7,  5,  4, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8, 10,  0, 10,  7,  0,  7,  5,  7, 10,  3, -1, -1, -1, -1},
    {  4, 10,  3,  0,  4,  3,  0,  3,  7,  0,  7,  9, -1, -1, -1, -1},
    {  3,  7,  9,  3,  9, 10, 10,  9,  8, -1, -1, -1, -1, -1, -1, -1},
    {  7, 11,  3,  2,  6,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2,  4,  0,  2,  6,  4,  3,  7, 11, -1, -1, -1, -1, -1, -1, -1},
    {  5,  9,  0,  7,  11, 3,  8,  2,  6, -1, -1, -1, -1, -1, -1, -1},
    { 11,  3,  7,  5,  9,  6,  5,  6,  4,  6,  9,  2, -1, -1, -1, -1},
    {  3,  5,  1,  3,  7,  5,  2,  6,  8, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1,  7,  7,  1,  3,  4,  0,  2,  4,  2,  6, -1, -1, -1, -1},
    {  8,  2,  6,  9,  0,  7,  0,  3,  7,  0,  1,  3, -1, -1, -1, -1},
    {  6,  4,  9,  6,  9,  2,  4,  1,  9,  7,  9,  3,  1,  3,  9, -1},
    {  4, 10,  1,  6,  8,  2, 11,  3,  7, -1, -1, -1, -1, -1, -1, -1},
    {  7, 11,  3,  2,  6,  1,  2,  1,  0,  1,  6, 10, -1, -1, -1, -1},
    {  0,  5,  9,  2,  6,  8,  1,  4, 10,  7, 11,  3, -1, -1, -1, -1},
    {  9,  1,  5,  9, 10,  1,  9,  2, 10,  6, 10,  2,  7, 11,  3, -1},
    {  8,  2,  6,  4, 10,  7,  4,  7,  5,  7, 10, 3,  -1, -1, -1, -1},
    {  7,  5, 10,  7, 10,  3,  5,  0, 10,  6, 10,  2,  0,  2, 10, -1},
    {  0,  7,  9,  0,  3,  7,  0,  4,  3, 10,  3,  4,  8,  2,  6, -1},
    {  3,  7,  9,  3,  9, 10,  2,  6,  9,  6, 10,  9, -1, -1, -1, -1},
    { 11,  2,  9,  3,  2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2, 11,  3,  2,  9, 11,  0,  8,  4, -1, -1, -1, -1, -1, -1, -1},
    { 11,  0,  5, 11,  3,  0,  3,  2,  0, -1, -1, -1, -1, -1, -1, -1},
    {  8,  4,  5,  8,  5,  3,  8,  3,  2,  3,  5, 11, -1, -1, -1, -1},
    {  5,  2,  9,  5,  1,  2,  1,  3,  2, -1, -1, -1, -1, -1, -1, -1},
    {  4,  0,  8,  5,  1,  9,  1,  2,  9,  1,  3,  2, -1, -1, -1, -1},
    {  0,  1,  2,  2,  1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  8,  4,  1,  8,  1,  2,  2,  1,  3, -1, -1, -1, -1, -1, -1, -1},
    { 11,  2,  9, 11,  3,  2, 10,  1,  4, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  1,  1,  8, 10,  2,  9, 11,  2, 11, 3,  -1, -1, -1, -1},
    {  4, 10,  1,  0,  5,  3,  0,  3,  2,  3,  5, 11, -1, -1, -1, -1},
    {  3,  2,  5,  3,  5, 11,  2,  8,  5,  1,  5, 10,  8, 10,  5, -1},
    {  9,  3,  2,  9,  4,  3,  9,  5,  4, 10,  3,  4, -1, -1, -1, -1},
    {  8, 10,  5,  8,  5,  0, 10,  3,  5,  9,  5,  2,  3,  2,  5, -1},
    {  4, 10,  3,  4,  3,  0,  0,  3,  2, -1, -1, -1, -1, -1, -1, -1},
    {  3,  2,  8, 10,  3,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  6, 11,  3,  6,  8, 11,  8,  9, 11, -1, -1, -1, -1, -1, -1, -1},
    {  0,  6,  4,  0, 11,  6,  0,  9, 11,  3,  6, 11, -1, -1, -1, -1},
    { 11,  3,  6,  5, 11,  6,  5,  6,  8,  5,  8,  0, -1, -1, -1, -1},
    { 11,  3,  6, 11,  6,  5,  5,  6,  4, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1,  3,  5,  3,  8,  5,  8,  9,  8,  3,  6, -1, -1, -1, -1},
    {  1,  3,  9,  1,  9,  5,  3,  6,  9,  0,  9,  4,  6,  4,  9, -1},
    {  6,  8,  0,  6,  0,  3,  3,  0,  1, -1, -1, -1, -1, -1, -1, -1},
    {  6,  4,  1,  3,  6,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  1,  4, 10, 11,  3,  8, 11,  8,  9,  8,  3,  6, -1, -1, -1, -1},
    {  1,  0,  6,  1,  6, 10,  0,  9,  6,  3,  6, 11,  9, 11,  6, -1},
    {  5,  8,  0,  5,  6,  8,  5, 11,  6,  3,  6, 11,  1,  4, 10, -1},
    { 10,  1,  5, 10,  5,  6, 11,  3,  5,  3,  6,  5, -1, -1, -1, -1},
    {  8,  9,  3,  8,  3,  6,  9,  5,  3, 10,  3,  4,  5,  4,  3, -1},
    {  0,  9,  5, 10,  3,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  6,  8,  0,  6,  0,  3,  4, 10,  0, 10,  3,  0, -1, -1, -1, -1},
    {  6, 10,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  6,  3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  4,  0,  8, 10,  6,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  5,  9, 10,  6,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  8,  5,  9,  8,  4,  5, 10,  6,  3, -1, -1, -1, -1, -1, -1, -1},
    { 11,  5,  1,  3, 10,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1, 11,  4,  0,  8,  3, 10,  6, -1, -1, -1, -1, -1, -1, -1},
    {  1,  9,  0,  1, 11,  9,  3, 10,  6, -1, -1, -1, -1, -1, -1, -1},
    {  3, 10,  6,  1, 11,  4, 11,  8,  4, 11,  9,  8, -1, -1, -1, -1},
    {  6,  1,  4,  3,  1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  6,  0,  8,  6,  3,  0,  3,  1,  0, -1, -1, -1, -1, -1, -1, -1},
    {  1,  6,  3,  1,  4,  6,  0,  5,  9, -1, -1, -1, -1, -1, -1, -1},
    {  5,  3,  1,  5,  8,  3,  5,  9,  8,  8,  6,  3, -1, -1, -1, -1},
    { 11,  6,  3, 11,  5,  6,  5,  4,  6, -1, -1, -1, -1, -1, -1, -1},
    { 11,  6,  3,  5,  6, 11,  5,  8,  6,  5,  0,  8, -1, -1, -1, -1},
    {  0,  4,  6,  0,  6, 11,  0, 11,  9,  3, 11,  6, -1, -1, -1, -1},
    {  6,  3, 11,  6, 11,  8,  8, 11,  9, -1, -1, -1, -1, -1, -1, -1},
    {  3,  8,  2, 10,  8,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  4,  3, 10,  4,  0,  3,  0,  2,  3, -1, -1, -1, -1, -1, -1, -1},
    {  8,  3, 10,  8,  2,  3,  9,  0,  5, -1, -1, -1, -1, -1, -1, -1},
    {  9,  2,  3,  9,  3,  4,  9,  4,  5, 10,  4,  3, -1, -1, -1, -1},
    {  3,  8,  2,  3, 10,  8,  1, 11,  5, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1, 11,  4,  0, 10,  0,  3, 10,  0,  2,  3, -1, -1, -1, -1},
    {  2, 10,  8,  2,  3, 10,  0,  1,  9,  1, 11,  9, -1, -1, -1, -1},
    { 11,  9,  4, 11,  4,  1,  9,  2,  4, 10,  4,  3,  2,  3,  4, -1},
    {  8,  1,  4,  8,  2,  1,  2,  3,  1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  2,  1,  2,  3,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  9,  0,  1,  4,  2,  1,  2,  3,  2,  4,  8, -1, -1, -1, -1},
    {  5,  9,  2,  5,  2,  1,  1,  2,  3, -1, -1, -1, -1, -1, -1, -1},
    {  8,  5,  4,  8,  3,  5,  8,  2,  3,  3, 11,  5, -1, -1, -1, -1},
    { 11,  5,  0, 11,  0,  3,  3,  0,  2, -1, -1, -1, -1, -1, -1, -1},
    {  2,  3,  4,  2,  4,  8,  3,  11, 4,  0,  4,  9, 11,  9,  4, -1},
    { 11,  9,  2,  3, 11,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2,  9,  7,  6,  3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  4,  2,  9,  7, 10,  6,  3, -1, -1, -1, -1, -1, -1, -1},
    {  7,  0,  5,  7,  2,  0,  6,  3, 10, -1, -1, -1, -1, -1, -1, -1},
    { 10,  6,  3,  8,  4,  2,  4,  7,  2,  4,  5,  7, -1, -1, -1, -1},
    {  9,  7,  2, 11,  5,  1,  6,  3, 10, -1, -1, -1, -1, -1, -1, -1},
    {  3, 10,  6,  5,  1, 11,  0,  8,  4,  2,  9,  7, -1, -1, -1, -1},
    {  6,  3, 10,  7,  2, 11,  2,  1, 11,  2,  0,  1, -1, -1, -1, -1},
    {  4,  2,  8,  4,  7,  2,  4,  1,  7, 11,  7,  1, 10,  6,  3, -1},
    {  6,  1,  4,  6,  3,  1,  7,  2,  9, -1, -1, -1, -1, -1, -1, -1},
    {  9,  7,  2,  0,  8,  3,  0,  3,  1,  3,  8,  6, -1, -1, -1, -1},
    {  4,  3,  1,  4,  6,  3,  5,  7,  0,  7,  2,  0, -1, -1, -1, -1},
    {  3,  1,  8,  3,  8,  6,  1,  5,  8,  2,  8,  7,  5,  7,  8, -1},
    {  9,  7,  2, 11,  5,  3,  5,  6,  3,  5,  4,  6, -1, -1, -1, -1},
    {  5,  3, 11,  5,  6,  3,  5,  0,  6,  8,  6,  0,  9,  7,  2, -1},
    {  2,  0, 11,  2, 11,  7,  0,  4, 11,  3, 11,  6,  4,  6, 11, -1},
    {  6,  3, 11,  6, 11,  8,  7,  2, 11,  2,  8, 11, -1, -1, -1, -1},
    {  3,  9,  7,  3, 10,  9, 10,  8,  9, -1, -1, -1, -1, -1, -1, -1},
    {  4,  3, 10,  0,  3,  4,  0,  7,  3,  0,  9,  7, -1, -1, -1, -1},
    {  0, 10,  8,  0,  7, 10,  0,  5,  7,  7,  3, 10, -1, -1, -1, -1},
    {  3, 10,  4,  3,  4,  7,  7,  4,  5, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1, 11,  9,  7, 10,  9, 10,  8, 10,  7,  3, -1, -1, -1, -1},
    {  0, 10,  4,  0,  3, 10,  0,  9,  3,  7,  3,  9,  5,  1, 11, -1},
    { 10,  8,  7, 10,  7,  3,  8,  0,  7, 11,  7,  1,  0,  1,  7, -1},
    {  3, 10,  4,  3,  4,  7,  1, 11,  4, 11,  7,  4, -1, -1, -1, -1},
    {  7,  8,  9,  7,  1,  8,  7,  3,  1,  4,  8,  1, -1, -1, -1, -1},
    {  9,  7,  3,  9,  3,  0,  0,  3,  1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  7,  8,  5,  8,  0,  7,  3,  8,  4,  8,  1,  3,  1,  8, -1},
    {  5,  7,  3,  1,  5,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  4,  3,  5,  3, 11,  4,  8,  3,  7,  3,  9,  8,  9,  3, -1},
    { 11,  5,  0, 11,  0,  3,  9,  7,  0,  7,  3,  0, -1, -1, -1, -1},
    {  0,  4,  8,  7,  3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    { 11,  7,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    { 10,  7, 11,  6,  7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    { 10,  7, 11, 10,  6,  7,  8,  4,  0, -1, -1, -1, -1, -1, -1, -1},
    {  7, 10,  6,  7, 11, 10,  5,  9,  0, -1, -1, -1, -1, -1, -1, -1},
    { 11,  6,  7, 11, 10,  6,  9,  8,  5,  8,  4,  5, -1, -1, -1, -1},
    { 10,  5,  1, 10,  6,  5,  6,  7,  5, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  4,  5,  1,  6,  5,  6,  7,  6,  1, 10, -1, -1, -1, -1},
    {  9,  6,  7,  9,  1,  6,  9,  0,  1,  1, 10,  6, -1, -1, -1, -1},
    {  6,  7,  1,  6,  1, 10,  7,  9,  1,  4,  1,  8,  9,  8,  1, -1},
    {  1,  7, 11,  1,  4,  7,  4,  6,  7, -1, -1, -1, -1, -1, -1, -1},
    {  8,  1,  0,  8,  7,  1,  8,  6,  7, 11,  1,  7, -1, -1, -1, -1},
    {  9,  0,  5,  7, 11,  4,  7,  4,  6,  4, 11,  1, -1, -1, -1, -1},
    {  9,  8,  1,  9,  1,  5,  8,  6,  1, 11,  1,  7,  6,  7,  1, -1},
    {  5,  4,  7,  4,  6,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  6,  0,  6,  5,  5,  6,  7, -1, -1, -1, -1, -1, -1, -1},
    {  9,  0,  4,  9,  4,  7,  7,  4,  6, -1, -1, -1, -1, -1, -1, -1},
    {  9,  8,  6,  7,  9,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  7,  8,  2,  7, 11,  8, 11, 10,  8, -1, -1, -1, -1, -1, -1, -1},
    {  7,  0,  2,  7, 10,  0,  7, 11, 10, 10, 4,  0,  -1, -1, -1, -1},
    {  0,  5,  9,  8,  2, 11,  8, 11, 10, 11, 2,  7,  -1, -1, -1, -1},
    { 11, 10,  2, 11,  2,  7, 10,  4,  2,  9,  2,  5,  4,  5,  2, -1},
    {  1,  7,  5,  1,  8,  7,  1, 10,  8,  2,  7,  8, -1, -1, -1, -1},
    {  0,  2, 10,  0, 10,  4,  2,  7, 10,  1, 10,  5,  7,  5, 10, -1},
    {  0,  1,  7,  0,  7,  9,  1, 10,  7,  2,  7,  8, 10,  8,  7, -1},
    {  9,  2,  7,  1, 10,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  1,  7, 11,  4,  7,  1,  4,  2,  7,  4,  8,  2, -1, -1, -1, -1},
    {  7, 11,  1,  7,  1,  2,  2,  1,  0, -1, -1, -1, -1, -1, -1, -1},
    {  4, 11,  1,  4,  7, 11,  4,  8,  7,  2,  7,  8,  0,  5,  9, -1},
    {  7, 11,  1,  7,  1,  2,  5,  9,  1,  9,  2,  1, -1, -1, -1, -1},
    {  8,  2,  7,  8,  7,  4,  4,  7,  5, -1, -1, -1, -1, -1, -1, -1},
    {  0,  2,  7,  5,  0,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  8,  2,  7,  8,  7,  4,  9,  0,  7,  0,  4,  7, -1, -1, -1, -1},
    {  9,  2,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2, 10,  6,  2,  9, 10,  9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
    {  0,  8,  4,  2,  9,  6,  9, 10,  6,  9, 11, 10, -1, -1, -1, -1},
    {  5, 11, 10,  5, 10,  2,  5,  2,  0,  6,  2, 10, -1, -1, -1, -1},
    {  4,  5,  2,  4,  2,  8,  5, 11,  2,  6,  2, 10, 11, 10,  2, -1},
    {  2, 10,  6,  9, 10,  2,  9,  1, 10,  9,  5,  1, -1, -1, -1, -1},
    {  9,  6,  2,  9, 10,  6,  9,  5, 10,  1, 10,  5,  0,  8,  4, -1},
    { 10,  6,  2, 10,  2,  1,  1,  2,  0, -1, -1, -1, -1, -1, -1, -1},
    { 10,  6,  2, 10,  2,  1,  8,  4,  2,  4,  1,  2, -1, -1, -1, -1},
    {  1,  9, 11,  1,  6,  9,  1,  4,  6,  6,  2,  9, -1, -1, -1, -1},
    {  9, 11,  6,  9,  6,  2, 11,  1,  6,  8,  6,  0,  1,  0,  6, -1},
    {  4,  6, 11,  4, 11,  1,  6,  2, 11,  5, 11,  0,  2,  0, 11, -1},
    {  5, 11,  1,  8,  6,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2,  9,  5,  2,  5,  6,  6,  5,  4, -1, -1, -1, -1, -1, -1, -1},
    {  2,  9,  5,  2,  5,  6,  0,  8,  5,  8,  6,  5, -1, -1, -1, -1},
    {  2,  0,  4,  6,  2,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  2,  8,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  9, 11,  8, 11, 10,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  4,  0,  9,  4,  9, 10, 10,  9, 11, -1, -1, -1, -1, -1, -1, -1},
    {  0,  5, 11,  0, 11,  8,  8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
    {  4,  5, 11, 10,  4, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  1, 10,  5, 10,  9,  9, 10,  8, -1, -1, -1, -1, -1, -1, -1},
    {  4,  0,  9,  4,  9, 10,  5,  1,  9,  1, 10,  9, -1, -1, -1, -1},
    {  0,  1, 10,  8,  0, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  4,  1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  1,  4,  8,  1,  8, 11, 11,  8,  9, -1, -1, -1, -1, -1, -1, -1},
    {  9, 11,  1,  0,  9,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  1,  4,  8,  1,  8, 11,  0,  5,  8,  5, 11,  8, -1, -1, -1, -1},
    {  5, 11,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  5,  4,  8,  9,  5,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  9,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {  0,  4,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};


//========================================================================================================================================================================================================================
// tetrahedral gradient
//========================================================================================================================================================================================================================
glm::dvec3 gradient(scalar_field func, const glm::dvec3& point, const double gradient_delta = 0.00125)
{
	double f100 = func(point + glm::dvec3( gradient_delta, -gradient_delta, -gradient_delta));
	double f001 = func(point + glm::dvec3(-gradient_delta, -gradient_delta,  gradient_delta));
	double f010 = func(point + glm::dvec3(-gradient_delta,  gradient_delta, -gradient_delta));	
	double f111 = func(point + glm::dvec3( gradient_delta,  gradient_delta,  gradient_delta));

    return glm::normalize(glm::dvec3( f100 - f001 - f010 + f111, 
    	                             -f100 - f001 + f010 + f111, 
    	                             -f100 + f001 - f010 + f111));
}

//========================================================================================================================================================================================================================
// Indexed mesh, representing a level surface, constructed in one thread
//========================================================================================================================================================================================================================
void isosurface::generate_vao(scalar_field func)
{
	const int cube_size = 160;
	const double delta = 2.0 / cube_size;
    const double grad_delta = 0.0625 * delta;

	//====================================================================================================================================================================================================================
	// data arrays to be used as attribute and index buffers
	//====================================================================================================================================================================================================================
	std::vector<vertex_pn_t> vertices;
	std::vector<GLuint> indices;

	std::map<GLuint, GLuint> edge_to_index;

	GLuint vertex_index = 0;

	glm::dvec3 base_point;
	base_point.z = -1.0;

	double values[8];

	for (GLuint r = 0; r < cube_size; ++r)
	{
		base_point.y = -1.0;
		for (GLuint q = 0; q < cube_size; ++q)
		{
			base_point.x = -1.0;
			for (GLuint p = 0; p < cube_size; ++p)
			{
				//========================================================================================================================================================================================================
				// calculate function values at the cube's corners and the cube type, 
				// i.e compute mask which vertices are inside of the isosurface (the value at the vertex is below the isovalue) and which are outside of it
				//========================================================================================================================================================================================================

				GLuint cube_type = 0;
				GLuint mask = 1;
				
				for (GLuint i = 0; i < 8; ++i)
				{
					values[i] = func(base_point + delta * cube_vertices[i]);
					if (values[i] <= 0.0) cube_type |= mask;
					mask <<= 1;
				}

				//========================================================================================================================================================================================================
	            // find which edges are intersected by the surface
				// nothing to do if the cube is entirely inside or outside of the surface
				//========================================================================================================================================================================================================
	            GLuint edges_bitmask = intersected_edges[cube_type];
				if (!edges_bitmask)
				{ 
					base_point.x += delta;
					continue;
				}
				
				//========================================================================================================================================================================================================
				// Find the point of intersection of the surface with each edge, then find the normal to the surface at those points
				//========================================================================================================================================================================================================
				mask = 1;
				GLuint edge_global_hash = (p << 1) + (q << (SHIFT + 1)) + (r << (SHIFT + SHIFT + 1));
				GLuint buffer_index[12];

	            for(GLuint i = 0; i < 12; i++)
				{
					//====================================================================================================================================================================================================
    			    // if there is an intersection on this edge
					//====================================================================================================================================================================================================
    			    if(edges_bitmask & mask)
    			    {
						GLuint edge_hash = edge_global_hash + edge_local_hash[i];						
                        std::map<GLuint, GLuint>::iterator it = edge_to_index.find(edge_hash);

						//================================================================================================================================================================================================
						// if the vertex already exists, get its index, otherwise create a new one
						//================================================================================================================================================================================================
						if (it != edge_to_index.end())
							buffer_index[i] = it->second;										
						else
						{
							//============================================================================================================================================================================================
							// a new vertex has to be created
							//============================================================================================================================================================================================
							buffer_index[i] = vertex_index;
							double value0 = values[cube_edges[i][0]];
							double value1 = values[cube_edges[i][1]];
	    	        		double dv = value0 - value1;
							double offset = value0 / dv;

							glm::dvec3 position = base_point + delta * (cube_vertices[cube_edges[i][0]] + offset * edge_directions[i]);
							glm::dvec3 normal = gradient(func, position, grad_delta);
	            			vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));

							//============================================================================================================================================================================================
							// store index value into the map 
							//============================================================================================================================================================================================
							edge_to_index[edge_hash] = vertex_index;
                            vertex_index++;
	            		}
    			    }
					mask <<= 1;
				}
				
				//========================================================================================================================================================================================================
				// add index triple for each triangle in the surface_triangles list for the given cube_type to the index buffer
				//========================================================================================================================================================================================================
				for (GLuint i = 0; surface_triangles[cube_type][i] != -1; i += 3)
				{
					indices.push_back(buffer_index[surface_triangles[cube_type][i + 0]]); 
					indices.push_back(buffer_index[surface_triangles[cube_type][i + 1]]); 
					indices.push_back(buffer_index[surface_triangles[cube_type][i + 2]]);
				}
	            
				base_point.x += delta;
			}			
			base_point.y += delta;
		}
		base_point.z += delta;
	}

  	vao.init(GL_TRIANGLES, vertices, indices);
}

void isosurface::generate_vao_2(scalar_field func)
{
    const int CUBE_SIZE = 4;
    const int CUBE_SIZE_PLUS_1 = CUBE_SIZE + 1;

    const double CUBE_MIN_BOUND = -1.0;
    const double CUBE_MAX_BOUND = 1.0;
    const double DELTA = (CUBE_MAX_BOUND - CUBE_MIN_BOUND) / double(CUBE_SIZE);
    const double GRADIENT_DELTA = 0.0625 * DELTA;

    //====================================================================================================================================================================================================================
    // data arrays to be used as attribute and index buffers
    //====================================================================================================================================================================================================================
    GLuint vertex_index = 0;
    std::vector<vertex_pn_t> vertices;
    std::vector<GLuint> indices;

    //====================================================================================================================================================================================================================
    // auxiliary data arrays
    //====================================================================================================================================================================================================================
    double z_values[CUBE_SIZE_PLUS_1 * CUBE_SIZE_PLUS_1];
    uint8_t z_masks[CUBE_SIZE * CUBE_SIZE];
    uint8_t y_masks[CUBE_SIZE];

    GLuint x_edges_0_i[CUBE_SIZE_PLUS_1][CUBE_SIZE];
    GLuint x_edges_1_i[CUBE_SIZE_PLUS_1][CUBE_SIZE];
    GLuint y_edges_0_i[CUBE_SIZE_PLUS_1][CUBE_SIZE];
    GLuint y_edges_1_i[CUBE_SIZE_PLUS_1][CUBE_SIZE];
    GLuint z_edges[CUBE_SIZE_PLUS_1][CUBE_SIZE_PLUS_1];

    GLuint (*x_edges_0)[CUBE_SIZE] = x_edges_0_i;
    GLuint (*x_edges_1)[CUBE_SIZE] = x_edges_1_i;
    GLuint (*y_edges_0)[CUBE_SIZE] = y_edges_0_i;
    GLuint (*y_edges_1)[CUBE_SIZE] = y_edges_1_i;


    

    //====================================================================================================================================================================================================================
    // step 0 :: fill in the first z-layer of data
    //====================================================================================================================================================================================================================
    double value, x_value, y_value, z_value, alpha;
    uint8_t mask, x_mask, y_mask, z_mask;
    glm::dvec3 p = glm::dvec3(CUBE_MIN_BOUND);
    double* value_ptr = z_values;
    uint8_t* mask_ptr = z_masks;

    printf("Working on z = %u. vertices.size = %u. indices.size = %u\n", 0, (int) vertices.size(), (int) indices.size());

    value = func(p);
    mask = value < 0.0;
    *(value_ptr++) = value;

    for (GLuint x = 0; x < CUBE_SIZE; ++x)
    {
        x_value = value;
        x_mask = mask;

        p.x += DELTA;
        value = func(p);
        mask = value < 0.0;

        if (mask != x_mask)
        {
            alpha = value / (value - x_value);
            glm::dvec3 position = glm::dvec3(p.x - alpha * DELTA, p.y, p.z);
            glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
            vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
            x_edges_0[0][x] = vertex_index++;
            printf("Adding vertex on edge X :: y = %u, x = %u\n", 0, 0);
        }

        *(value_ptr++) = value;
        y_masks[x] = x_mask | (mask << 1);
    }

    for(GLuint y = 0; y < CUBE_SIZE; ++y)
    {
        p.y += DELTA;
        p.x = CUBE_MIN_BOUND;
        value = func(p);

        mask = value < 0.0;
        y_mask = y_masks[0] & 1;

        if (y_mask != mask)
        {
            y_value = *(value_ptr - CUBE_SIZE);
            alpha = value / (value - y_value);
            glm::dvec3 position = glm::dvec3(p.x, p.y - alpha * DELTA, p.z);
            glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
            vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
            y_edges_0[0][y] = vertex_index++;
            printf("Adding vertex on edge Y :: x = %u, y = %u\n", 0, y);
        }

        *(value_ptr++) = value;

        for(GLuint x = 0; x < CUBE_SIZE; ++x)
        {
        	x_value = value;
        	x_mask = mask;
            p.x += DELTA;

            value = func(p);
            mask = value < 0.0;
            y_mask = y_masks[x];

            if (x_mask != mask)
            {
                alpha = value / (value - x_value);
                glm::dvec3 position = glm::dvec3(p.x - alpha * DELTA, p.y, p.z);
                glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                x_edges_0[y + 1][x] = vertex_index++;
	            printf("Adding vertex on edge X :: y = %u, x = %u\n", y + 1, x);
            }

            if ((y_mask >> 1) != mask)
            {
                y_value = *(value_ptr - CUBE_SIZE);
                alpha = value / (value - y_value);
                glm::dvec3 position = glm::dvec3(p.x, p.y - alpha * DELTA, p.z);
                glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                y_edges_0[x + 1][y] = vertex_index++; 
	            printf("Adding vertex on edge Y :: x = %u, y = %u\n", x + 1, y);
            }

            *(value_ptr++) = value;
            uint8_t aux_mask = x_mask | (mask << 1);
            y_masks[x] = aux_mask;
            *(mask_ptr++) = y_mask | (aux_mask << 2);
        }
    }

    //====================================================================================================================================================================================================================
    // the main loop
    //====================================================================================================================================================================================================================
    for(GLuint z = 0; z < CUBE_SIZE; ++z)
    {
    	printf("Working on z = %u. vertices.size = %u. indices.size = %u\n", z + 1, (int) vertices.size(), (int) indices.size());
        value_ptr = z_values;
        mask_ptr = z_masks;
        //================================================================================================================================================================================================================
        // working on the z-layer number z + 1 and the previous one, i.e. z
        //   step 1 :: calculate values of the field on the new layer, simultaneously detecting z - orthogonal edges which 
        //             contain zeros of the field, generate new vertices, and calculate their data
        //================================================================================================================================================================================================================
        p.x = CUBE_MIN_BOUND;
        p.y = CUBE_MIN_BOUND;
        p.z += DELTA;

        value = func(p);
        mask = value < 0.0;
        z_mask = (*mask_ptr) & 1;

        if (z_mask != mask)
        {
            z_value = *(value_ptr);
            alpha = value / (value - z_value);
            glm::dvec3 position = glm::dvec3(p.x, p.y, p.z - alpha * DELTA);
            glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
            vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
            z_edges[0][0] = vertex_index++;
	        printf("Adding vertex on edge Z :: x = %u, y = %u\n", 0, 0);
        }

        *(value_ptr++) = value;

        for (GLuint x = 0; x < CUBE_SIZE; ++x)
        {
        	x_value = value;
        	x_mask = mask;

            p.x += DELTA;
            value = func(p);
            mask = value < 0.0;
            z_mask = ((*(mask_ptr++)) >> 1) & 1;

            if (mask != x_mask)
            {
                alpha = value / (value - x_value);
                glm::dvec3 position = glm::dvec3(p.x - alpha * DELTA, p.y, p.z);
                glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                x_edges_1[0][x] = vertex_index++;
		        printf("Adding vertex on edge X :: y = %u, x = %u\n", 0, x);
            }

            if (mask != z_mask)
            {
                z_value = *value_ptr;
                alpha = value / (value - z_value);
                glm::dvec3 position = glm::dvec3(p.x, p.y, p.z - alpha * DELTA);
                glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                z_edges[0][x + 1] = vertex_index++;
		        printf("Adding vertex on edge Z :: y = %u, x = %u\n", 0, x + 1);
            }

            *(value_ptr++) = value;
            y_masks[x] = x_mask | (mask << 1);
        }

        mask_ptr = z_masks;

        for(GLuint y = 0; y < CUBE_SIZE; ++y)
        {
            p.y += DELTA;
            p.x = CUBE_MIN_BOUND;

            value = func(p);
            mask = value < 0.0;
            y_mask = y_masks[0] & 1;
            z_mask = (*mask_ptr) & 1;

            if (y_mask != mask)
            {
                y_value = *(value_ptr - CUBE_SIZE);
                alpha = value / (value - y_value);
                glm::dvec3 position = glm::dvec3(p.x, p.y - alpha * DELTA, p.z);
                glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                y_edges_1[0][y] = vertex_index++;
		        printf("Adding vertex on edge Y :: x = %u, y = %u\n", 0, y);
            }

            if (z_mask != mask)
            {
                z_value = *(value_ptr);
                alpha = value / (value - z_value);
                glm::dvec3 position = glm::dvec3(p.x, p.y, p.z - alpha * DELTA);
                glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                z_edges[y + 1][0] = vertex_index++;
		        printf("Adding vertex on edge Z :: y = %u, x = %u\n", y + 1, 0);
            }

            *(value_ptr++) = value;

            for(GLuint x = 0; x < CUBE_SIZE; ++x)
            {
            	x_value = value;
                x_mask = mask;

                p.x += DELTA;
                value = func(p);
                mask = value < 0.0;

                y_mask = y_masks[x];
                z_mask = *mask_ptr;

                if (x_mask != mask)
                {
                    alpha = value / (value - x_value);
                    glm::dvec3 position = glm::dvec3(p.x - alpha * DELTA, p.y, p.z);
                    glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                    vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                    x_edges_1[y + 1][x] = vertex_index++;
		        	printf("Adding vertex on edge X :: y = %u, x = %u\n", y + 1, x);
                }

                if ((y_mask >> 1) != mask)
                {
                    y_value = *(value_ptr - CUBE_SIZE);
                    alpha = value / (value - y_value);
                    glm::dvec3 position = glm::dvec3(p.x, p.y - alpha * DELTA, p.z);
                    glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                    vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                    y_edges_1[x + 1][y] = vertex_index++; 
		        	printf("Adding vertex on edge Y :: x = %u, y = %u\n", x + 1, y);
                }

                if (((z_mask >> 3) & 1) != mask)
                {
                    z_value = *(value_ptr);
                    alpha = value / (value - z_value);
                    glm::dvec3 position = glm::dvec3(p.x, p.y, p.z - alpha * DELTA);
                    glm::dvec3 normal = gradient(func, position, GRADIENT_DELTA);
                    vertices.push_back(vertex_pn_t(glm::vec3(position), glm::vec3(normal)));
                    z_edges[y + 1][x + 1] = vertex_index++; 
		        	printf("Adding vertex on edge Y :: y = %u, x = %u\n", y + 1, x + 1);

                }

                *(value_ptr++) = value;
                uint8_t y1_mask = x_mask | (mask << 1);
                y_masks[x] = y1_mask;
                uint8_t z1_mask = (y1_mask << 2) | y_mask; 
                uint8_t cube_type = (z1_mask << 4) | z_mask;
                *(mask_ptr++) = z1_mask;

                //========================================================================================================================================================================================================
                // cell bitmask is completely computed, generate triangles
                //========================================================================================================================================================================================================
                printf("Generating triangles for cell (%u, %u, %u) :: cube_type = %u\n", x, y, z, cube_type); 
                for (GLuint i = 0; surface_triangles2[cube_type][i] != -1; ++i)
                {
                    GLuint edge = surface_triangles2[cube_type][i];
                    GLuint index = (edge < 0x4) ? ((edge < 0x2) ? x_edges_0[y + edge - 0x0][x] : x_edges_1[y + edge - 0x2][x]) :
                                   (edge < 0x8) ? ((edge < 0x6) ? y_edges_0[x + edge - 0x4][y] : y_edges_1[x + edge - 0x6][y]) :
                                                  ((edge < 0xA) ? z_edges[y][x + edge - 0x8] : z_edges[y + 1][x + edge - 0xA]);
                    indices.push_back(index);
                    printf("\tedge = %u. index = %u\n", edge, index); 
                }
                printf("Done.\n");

                 
            }
        }

        GLuint (*x_edges)[CUBE_SIZE] = x_edges_0;
        x_edges_0 = x_edges_1;
        x_edges_1 = x_edges;
        GLuint (*y_edges)[CUBE_SIZE] = y_edges_0;
        y_edges_0 = y_edges_1;
        y_edges_1 = y_edges;

    }
    vao.init(GL_TRIANGLES, vertices, indices);    
}