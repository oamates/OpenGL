#version 400 core

layout (vertices = 1) out;

uniform vec3 camera_ws;

in vec3 position[];
in vec3 normal[];
in vec3 tangent_x[];
in vec3 tangent_y[];

out vec3 p[];
out vec3 n[];
out vec3 t[];
out vec3 b[];

void main()
{
    vec3 delta = camera_ws - position[gl_InvocationID];
    float dp = dot(delta, delta); 
    const float lambda = 7.171;
    float level = 80.0f / (1.0f + lambda * dp);

    gl_TessLevelOuter[0] = level;
    gl_TessLevelOuter[1] = level;
    gl_TessLevelOuter[2] = level;
    gl_TessLevelOuter[3] = level;

    gl_TessLevelInner[0] = level;
    gl_TessLevelInner[1] = level;

    p[gl_InvocationID] = position[gl_InvocationID];
    n[gl_InvocationID] = normal[gl_InvocationID];
    t[gl_InvocationID] = tangent_x[gl_InvocationID];
    b[gl_InvocationID] = tangent_y[gl_InvocationID];
}