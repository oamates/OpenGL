#version 400 core

layout(quads, equal_spacing, ccw) in;

/*
    rgb channel - normal,
    alpha channel - displacement
*/

uniform mat4 projection_view_matrix;
uniform vec3 camera_ws;
uniform vec3 light_ws;

uniform sampler2D disp_tex;

in vec3 p[];
in vec3 n[];
in vec3 t[];
in vec3 b[];

out vec3 view;
out vec3 light;
out vec3 normal;
out vec2 uv;
 
void main()
{
    vec4 normal_disp = texture(disp_tex, gl_TessCoord.xy);
    float disp = normal_disp.a;

    vec3 position = p[0] + (2.0 * gl_TessCoord.x - 1.0) * t[0] + (2.0 * gl_TessCoord.y - 1.0) * b[0] + disp * n[0];
    view = camera_ws - position;
    light = light_ws - position;
    normal = 2.0 * normal_disp.rgb - 1.0;
    uv = gl_TessCoord.xy;
    gl_Position = projection_view_matrix * vec4(position, 1.0);
}