#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

//==============================================================================================================================================================
// input  :: point cloud stored in GL_TEXTURE_BUFFER bound to image unit 0
// output :: unsigned integral SDF texture bound to image unit 1
//==============================================================================================================================================================
layout (r32ui, binding = 0) uniform uimage3D sdf_internal;
layout (r32ui, binding = 1) uniform uimage3D sdf_external;

layout (r32f, binding = 2) uniform image3D sdf;


//==============================================================================================================================================================
// this uniform is the distance from model surface at which the point cloud was generated
//==============================================================================================================================================================
uniform float sigma;

const float integral_scale = 268435456.0;       // = 2^28
const float inv_scale = 1.0 / integral_scale;


void main()
{
    //==========================================================================================================================================================
    // index in the input buffer this invocation will work with
    //==========================================================================================================================================================
    ivec3 id = ivec3(gl_GlobalInvocationID.xyz);

    //==========================================================================================================================================================
    // read the input unsigned int distances
    //==========================================================================================================================================================
    uint external_distance = imageLoad(sdf_external, id).x;
    uint internal_distance = imageLoad(sdf_internal, id).x;

    //==========================================================================================================================================================
    // convert to float and normalize
    //==========================================================================================================================================================
    float e = inv_scale * float(external_distance);
    float i = inv_scale * float(internal_distance);

    //==========================================================================================================================================================
    // compute and store the sdf
    //==========================================================================================================================================================
    float sd = (e < i) ? 
                min(sqrt(i) - sigma, 0.0): // the point is outside the model
               -min(sqrt(e) - sigma, 0.0); // the point is  inside the model

    imageStore(sdf, id, vec4(sd, 0.0, 0.0, 0.0));
}
