#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

//==============================================================================================================================================================
// input  :: point cloud stored in GL_TEXTURE_BUFFER bound to image unit 0
// output :: unsigned integral SDF texture bound to image unit 1
//==============================================================================================================================================================
layout (r32ui, binding = 0) uniform uimage3D distance_field;

//==============================================================================================================================================================
// this uniform is the distance from model surface at which the point cloud was generated
//==============================================================================================================================================================

const ivec4 LATTICE_SHIFT[125] = ivec4[]
(
    ivec4(-2, -2, -2, 0xC), ivec4(-1, -2, -2, 0x9), ivec4( 0, -2, -2, 0x8), ivec4( 1, -2, -2, 0x9), ivec4( 2, -2, -2, 0xC), 
    ivec4(-2, -1, -2, 0x9), ivec4(-1, -1, -2, 0x6), ivec4( 0, -1, -2, 0x5), ivec4( 1, -1, -2, 0x6), ivec4( 2, -1, -2, 0x9), 
    ivec4(-2,  0, -2, 0x8), ivec4(-1,  0, -2, 0x5), ivec4( 0,  0, -2, 0x4), ivec4( 1,  0, -2, 0x5), ivec4( 2,  0, -2, 0x8), 
    ivec4(-2,  1, -2, 0x9), ivec4(-1,  1, -2, 0x6), ivec4( 0,  1, -2, 0x5), ivec4( 1,  1, -2, 0x6), ivec4( 2,  1, -2, 0x9), 
    ivec4(-2,  2, -2, 0xC), ivec4(-1,  2, -2, 0x9), ivec4( 0,  2, -2, 0x8), ivec4( 1,  2, -2, 0x9), ivec4( 2,  2, -2, 0xC), 

    ivec4(-2, -2, -1, 0x9), ivec4(-1, -2, -1, 0x6), ivec4( 0, -2, -1, 0x5), ivec4( 1, -2, -1, 0x6), ivec4( 2, -2, -1, 0x9), 
    ivec4(-2, -1, -1, 0x6), ivec4(-1, -1, -1, 0x3), ivec4( 0, -1, -1, 0x2), ivec4( 1, -1, -1, 0x3), ivec4( 2, -1, -1, 0x6), 
    ivec4(-2,  0, -1, 0x5), ivec4(-1,  0, -1, 0x2), ivec4( 0,  0, -1, 0x1), ivec4( 1,  0, -1, 0x2), ivec4( 2,  0, -1, 0x5), 
    ivec4(-2,  1, -1, 0x6), ivec4(-1,  1, -1, 0x3), ivec4( 0,  1, -1, 0x2), ivec4( 1,  1, -1, 0x3), ivec4( 2,  1, -1, 0x6), 
    ivec4(-2,  2, -1, 0x9), ivec4(-1,  2, -1, 0x6), ivec4( 0,  2, -1, 0x5), ivec4( 1,  2, -1, 0x6), ivec4( 2,  2, -1, 0x9), 

    ivec4(-2, -2,  0, 0x8), ivec4(-1, -2,  0, 0x5), ivec4( 0, -2,  0, 0x4), ivec4( 1, -2,  0, 0x5), ivec4( 2, -2,  0, 0x8), 
    ivec4(-2, -1,  0, 0x5), ivec4(-1, -1,  0, 0x2), ivec4( 0, -1,  0, 0x1), ivec4( 1, -1,  0, 0x2), ivec4( 2, -1,  0, 0x5), 
    ivec4(-2,  0,  0, 0x4), ivec4(-1,  0,  0, 0x1), ivec4( 0,  0,  0, 0x0), ivec4( 1,  0,  0, 0x1), ivec4( 2,  0,  0, 0x4), 
    ivec4(-2,  1,  0, 0x5), ivec4(-1,  1,  0, 0x2), ivec4( 0,  1,  0, 0x1), ivec4( 1,  1,  0, 0x2), ivec4( 2,  1,  0, 0x5), 
    ivec4(-2,  2,  0, 0x8), ivec4(-1,  2,  0, 0x5), ivec4( 0,  2,  0, 0x4), ivec4( 1,  2,  0, 0x5), ivec4( 2,  2,  0, 0x8), 

    ivec4(-2, -2,  1, 0x9), ivec4(-1, -2,  1, 0x6), ivec4( 0, -2,  1, 0x5), ivec4( 1, -2,  1, 0x6), ivec4( 2, -2,  1, 0x9), 
    ivec4(-2, -1,  1, 0x6), ivec4(-1, -1,  1, 0x3), ivec4( 0, -1,  1, 0x2), ivec4( 1, -1,  1, 0x3), ivec4( 2, -1,  1, 0x6), 
    ivec4(-2,  0,  1, 0x5), ivec4(-1,  0,  1, 0x2), ivec4( 0,  0,  1, 0x1), ivec4( 1,  0,  1, 0x2), ivec4( 2,  0,  1, 0x5), 
    ivec4(-2,  1,  1, 0x6), ivec4(-1,  1,  1, 0x3), ivec4( 0,  1,  1, 0x2), ivec4( 1,  1,  1, 0x3), ivec4( 2,  1,  1, 0x6), 
    ivec4(-2,  2,  1, 0x9), ivec4(-1,  2,  1, 0x6), ivec4( 0,  2,  1, 0x5), ivec4( 1,  2,  1, 0x6), ivec4( 2,  2,  1, 0x9), 

    ivec4(-2, -2,  2, 0xC), ivec4(-1, -2,  2, 0x9), ivec4( 0, -2,  2, 0x8), ivec4( 1, -2,  2, 0x9), ivec4( 2, -2,  2, 0xC), 
    ivec4(-2, -1,  2, 0x9), ivec4(-1, -1,  2, 0x6), ivec4( 0, -1,  2, 0x5), ivec4( 1, -1,  2, 0x6), ivec4( 2, -1,  2, 0x9), 
    ivec4(-2,  0,  2, 0x8), ivec4(-1,  0,  2, 0x5), ivec4( 0,  0,  2, 0x4), ivec4( 1,  0,  2, 0x5), ivec4( 2,  0,  2, 0x8), 
    ivec4(-2,  1,  2, 0x9), ivec4(-1,  1,  2, 0x6), ivec4( 0,  1,  2, 0x5), ivec4( 1,  1,  2, 0x6), ivec4( 2,  1,  2, 0x9), 
    ivec4(-2,  2,  2, 0xC), ivec4(-1,  2,  2, 0x9), ivec4( 0,  2,  2, 0x8), ivec4( 1,  2,  2, 0x9), ivec4( 2,  2,  2, 0xC)
);

void main()
{
    //==========================================================================================================================================================
    // index in the input buffer this invocation will work with
    //==========================================================================================================================================================
    ivec3 id = ivec3(gl_GlobalInvocationID.xyz);

    //==========================================================================================================================================================
    // read the current distance value
    //==========================================================================================================================================================
    uint l = imageLoad(distance_field, id).x;
    if (l == 0xFFFFFFFF) return;

    float factor = 256.0 * sqrt(float(l));

    //==========================================================================================================================================================
    // index in the input buffer this invocation will work with
    //==========================================================================================================================================================
    for (int idx = 0; idx < 125; ++idx)
    {
        ivec4 shift = LATTICE_SHIFT[idx];
        ivec3 idx3d = id + shift.xyz;

        if (all(greaterThanEqual(idx3d, ivec3(0))) && all(lessThanEqual(idx3d, ivec3(255))))
        {
            uint d = l + ((shift.w) << 14) + uint(factor * sqrt(float(shift.w)));
            imageAtomicMin(distance_field, idx3d, d);
        }
    }
}
