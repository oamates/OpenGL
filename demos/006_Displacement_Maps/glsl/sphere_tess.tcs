#version 400 core

layout (vertices = 3) out;

uniform vec3 camera_ws;

in vec3 position[];
out vec3 position_ws[];

void main()
{
    if (gl_InvocationID == 0)
    {
        vec3 delta0 = camera_ws - position[0];
        vec3 delta1 = camera_ws - position[1];
        vec3 delta2 = camera_ws - position[2];

        float dp0 = dot(delta0, delta0); 
        float dp1 = dot(delta1, delta1); 
        float dp2 = dot(delta2, delta2); 

        const float lambda = 3.11;
        
        float level0 = 300.0f / (1.0f + lambda * dp0);
        float level1 = 300.0f / (1.0f + lambda * dp1);
        float level2 = 300.0f / (1.0f + lambda * dp2);

        gl_TessLevelOuter[0] = 0.5f * (level1 + level2);
        gl_TessLevelOuter[1] = 0.5f * (level2 + level0);
        gl_TessLevelOuter[2] = 0.5f * (level0 + level1);

        gl_TessLevelInner[0] = 0.333f * (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]);
    }
    position_ws[gl_InvocationID] = position[gl_InvocationID];
}